services:
  postgres:
    image: postgres:15-alpine
    container_name: notification-postgres
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_pass
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - notification-network

  # üß† –ö—ç—à Redis
  redis:
    image: redis:7-alpine
    container_name: notification-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - notification-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: notification-rabbitmq
    ports:
      - "5672:5672"      # AMQP –ø–æ—Ä—Ç
      - "15672:15672"    # Management –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    environment:
      RABBITMQ_DEFAULT_USER: notification_user
      RABBITMQ_DEFAULT_PASS: notification_pass
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_stream advertised_host localhost"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq-config:/etc/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - notification-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: notification-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped
    networks:
      - notification-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: notification-logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/notification
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: unless-stopped
    networks:
      - notification-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: notification-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - notification-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: notification-filebeat
    user: root
    depends_on:
      logstash:
        condition: service_started
    volumes:
      - ./elk/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/var/log/notification:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - notification-network

  sentry-postgres:
    image: postgres:15-alpine
    container_name: sentry-postgres
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - sentry_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentry"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - notification-network

  sentry-redis:
    image: redis:7-alpine
    container_name: sentry-redis
    volumes:
      - sentry_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - notification-network

  sentry:
    image: sentry:latest
    container_name: sentry-server
    depends_on:
      sentry-postgres:
        condition: service_healthy
      sentry-redis:
        condition: service_healthy
    environment:
      SENTRY_SECRET_KEY: 'your-sentry-secret-key-change-in-production'
      SENTRY_POSTGRES_HOST: sentry-postgres
      SENTRY_REDIS_HOST: sentry-redis
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
    volumes:
      - ./sentry/config/sentry.conf.py:/etc/sentry/sentry.conf.py
    ports:
      - "9000:9000"
    restart: unless-stopped
    networks:
      - notification-network

  sentry-worker:
    image: sentry:latest
    container_name: sentry-worker
    depends_on:
      sentry:
        condition: service_started
    environment:
      SENTRY_SECRET_KEY: 'your-sentry-secret-key-change-in-production'
      SENTRY_POSTGRES_HOST: sentry-postgres
      SENTRY_REDIS_HOST: sentry-redis
    command: sentry run worker
    volumes:
      - ./sentry/config/sentry.conf.py:/etc/sentry/sentry.conf.py
    restart: unless-stopped
    networks:
      - notification-network

  sentry-cron:
    image: sentry:latest
    container_name: sentry-cron
    depends_on:
      sentry:
        condition: service_started
    environment:
      SENTRY_SECRET_KEY: 'your-sentry-secret-key-change-in-production'
      SENTRY_POSTGRES_HOST: sentry-postgres
      SENTRY_REDIS_HOST: sentry-redis
    command: sentry run cron
    volumes:
      - ./sentry/config/sentry.conf.py:/etc/sentry/sentry.conf.py
    restart: unless-stopped
    networks:
      - notification-network

volumes:
  postgres_data:
    name: notification-postgres-data
  redis_data:
    name: notification-redis-data
  rabbitmq_data:
    name: notification-rabbitmq-data
  elasticsearch_data:
    name: notification-elasticsearch-data
  sentry_postgres_data:
    name: notification-sentry-postgres-data
  sentry_redis_data:
    name: notification-sentry-redis-data

networks:
  notification-network:
    name: notification-system-network
    driver: bridge